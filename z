Binary file a.out matches
display_para.c:	m->x2 = m->xinit + (m->i + 1) * m->gap;
display_para.c:	m->y2 = m->yinit + m->j * m->gap;
display_para.c:	m->x2 = m->xinit + m->i * m->gap;
display_para.c:	m->y2 = m->yinit + (m->j - 1) * m->gap;
display_para.c:	m->x1 = m->x2;
display_para.c:	m->y1 = m->y2;
display_para.c:	m->xinit = WIDTH / 2 - (m->column * m->gap) / 2;
display_para.c:	m->yinit = HEIGHT / 2 - (m->line * m->gap) / 2;
display_para.c:	m->x1 = m->xinit;
display_para.c:	m->y1 = m->yinit;
display_rot.c:	m->x2 = m->xout + m->i * m->gap;
display_rot.c:	m->z = m->array[m->j][m->i];
display_rot.c:	m->x2 += m->xlen;
display_rot.c:	return (m->x2);
display_rot.c:	m->x2 = m->xout + m->i * m->gap;
display_rot.c:	m->y2 = m->yout + m->j * m->gap;
display_rot.c:	m->z = m->array[m->j][m->i] * 10;
display_rot.c:	m->x2 += m->xlen;
display_rot.c:	m->y2 += m->ylen;
display_rot.c:	m->x1 = m->tab[m->j][0][m->i];
display_rot.c:	m->y1 = m->tab[m->j][1][m->i];
display_rot.c:	m->x2 = m->tab[m->j - 1][0][m->i];
display_rot.c:	m->y2 = m->tab[m->j - 1][1][m->i];
display_rot.c:	m->x1 = m->tab[m->j][0][m->i];
display_rot.c:	m->y1 = m->tab[m->j][1][m->i];
display_rot.c:	m->x2 = m->tab[m->j][0][m->i + 1];
display_rot.c:	m->y2 = m->tab[m->j][1][m->i + 1];
display_rot_old.c:	m->x1 += m->xlen;
display_rot_old.c:	m->y1 += m->ylen;
display_rot_old.c:	m->xinit += m->xlen;
display_rot_old.c:	m->yinit += m->ylen;
display_rot_old.c:	ft_memset(m->str, 0, WIDTH * HEIGHT * 4);
display_rot_old.c:	mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
display_rot_old.c:	m->xout = 0 - (m->column - 1) * m->gap / 2;
display_rot_old.c:	m->yout = 0 - (m->line - 1) * m->gap / 2;
display_rot_old.c:	m->xlen = 0 + m->xinit + (m->column - 1) * m->gap / 2;
display_rot_old.c:	m->ylen = 0 + m->yinit + (m->line - 1) * m->gap / 2;
display_rot_old.c:	m->x1 = m->xout;
display_rot_old.c:	m->y1 = m->yout;
display_rot_old.c:	m->i = 0;
display_rot_old.c:	m->j = 0;
display_rot_old.c:	m->z = m->array[m->j][m->i] * 10;
display_rot_old.c:	//printf("array[%d][%d]: %d\n", m->j, m->i, m->array[m->j][m->i]);
display_rot_old.c:	//printf("Z: %d\n", m->z);
display_rot_old.c:	m->x2 = m->xout + m->i * m->gap;
display_rot_old.c:	m->y2 = m->yout + (m->j - 1) * m->gap;
display_rot_old.c:	m->z = m->array[m->j][m->i + 1];
display_rot_old.c:	m->x2 += m->xlen;
display_rot_old.c:	m->y2 += m->ylen;
display_rot_old.c://	printf("A\tx1: %d, y1: %d\n\tx2: %d, y2: %d, z: %d\n", m->x1, m->y1, m->x2, m->y2, m->z);
display_rot_old.c:	m->x2 = m->xout + (m->i + 1) * m->gap;
display_rot_old.c:	m->y2 = m->yout + m->j * m->gap;
display_rot_old.c:	m->z = m->array[m->j][m->i + 1];
display_rot_old.c:	m->x2 += m->xlen;
display_rot_old.c:	m->y2 += m->ylen;
display_rot_old.c://	printf("B\tx1: %d, y1: %d\n\tx2: %d, y2: %d, z: %d\n", m->x1, m->y1, m->x2, m->y2, m->z);
main.c:		m->gap *= 1.1;
main.c:		m->gap *= 0.9;
main.c:		ft_memset(m->str, 0, WIDTH * HEIGHT * 4);
main.c:		mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
main.c:		m->xtheta += 0.1;
main.c:		mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
main.c:		ft_memset(m->str, 0, WIDTH * HEIGHT * 4);
main.c:		mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
main.c:		m->xtheta -= 0.1;
main.c:		mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
main.c:		ft_memset(m->str, 0, WIDTH * HEIGHT * 4);
main.c:		mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
main.c:		m->ytheta += 0.1;
main.c:		mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
main.c:		ft_memset(m->str, 0, WIDTH * HEIGHT * 4);
main.c:		mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
main.c:		m->ytheta -= 0.1;
main.c:		mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
main.c:		ft_memset(m->str, 0, WIDTH * HEIGHT * 4);
main.c:		mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
main.c:		m->ztheta += 0.1;
main.c:		mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
main.c:		ft_memset(m->str, 0, WIDTH * HEIGHT * 4);
main.c:		mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
main.c:		m->ztheta -= 0.1;
main.c:		mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
manipulate.c:	ft_memset(m->str, 0, WIDTH * HEIGHT * 4);
manipulate.c:	mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
manipulate.c:	m->xinit += a;
manipulate.c:	m->yinit += b;
manipulate.c:	mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
manipulate.c:	ft_memset(m->str, 0, WIDTH * HEIGHT * 4);
manipulate.c:	mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
manipulate.c:	m->xinit -= (m->gap - m->savegap) * (m->column - 1) / 2;
manipulate.c:	m->yinit -= (m->gap - m->savegap) * (m->line - 1) / 2;
manipulate.c:	m->savegap = m->gap;
manipulate.c:	mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
manipulate.c:	ft_memset(m->str, 0, WIDTH * HEIGHT * 4);
manipulate.c:	mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
manipulate.c:	m->xinit += (m->savegap - m->gap) * (m->column - 1) / 2;
manipulate.c:	m->yinit += (m->savegap - m->gap) * (m->line - 1) / 2;
manipulate.c:	m->savegap = m->gap;
manipulate.c:	mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
manipulate.c:	ft_memset(m->str, 0, WIDTH * HEIGHT * 4);
manipulate.c:	mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
manipulate.c:	m->gap = m->initgap;
manipulate.c:	m->savegap = m->initgap;
manipulate.c:	m->xinit = WIDTH / 2;
manipulate.c:	m->yinit = HEIGHT / 4;
manipulate.c:	mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
manipulate.c:	ft_memset(m->str, 0, WIDTH * HEIGHT * 4);
manipulate.c:	mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
manipulate.c:	m->gap = m->initgap;
manipulate.c:	m->savegap = m->initgap;
manipulate.c:	m->xinit = WIDTH / 2 - ((m->column - 1) * m->gap) / 2;
manipulate.c:	m->yinit = HEIGHT / 2 - ((m->line - 1) * m->gap) / 2;
manipulate.c:	m->xtheta = 0;
manipulate.c:	m->ytheta = 0;
manipulate.c:	m->ztheta = 0;
manipulate.c:	mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
manipulate.c:	ft_memset(m->str, 0, WIDTH * HEIGHT * 4);
manipulate.c:	mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
manipulate.c:	m->gap = m->initgap;
manipulate.c:	m->savegap = m->initgap;
manipulate.c:	m->xinit = WIDTH / 2 - ((m->column - 1) * m->gap) / 2;
manipulate.c:	m->yinit = HEIGHT / 2 - ((m->line - 1) * m->gap) / 2;
manipulate.c:	mlx_put_image_to_window(m->ptr, m->win, m->img, 0, 0);
rotate.c:	y = m->y2;
rotate.c:	z = m->z;
rotate.c:	m->y2 = cos(m->xtheta) * y - sin(m->xtheta) * z;
rotate.c:	m->z = sin(m->xtheta) * y + cos(m->xtheta) * z;
rotate.c:	x = m->x2;
rotate.c:	z = m->z;
rotate.c:	m->x2 = cos(m->ytheta) * x + sin(m->ytheta) * z;
rotate.c:	m->z = cos(m->ytheta) * z - sin(m->ytheta) * x;
rotate.c:	x = m->x2;
rotate.c:	y = m->y2;
rotate.c:	m->x2 = cos(m->ztheta) * x - sin(m->ztheta) * y;
rotate.c:	m->y2 = sin(m->ztheta) * x + cos(m->ztheta) * y;
rotate.c:	y = m->y1;
rotate.c:	z = m->z;
rotate.c:	m->y1 = cos(m->xtheta) * y - sin(m->xtheta) * z;
rotate.c:	m->z = sin(m->xtheta) * y + cos(m->xtheta) * z;
rotate.c:	x = m->x1;
rotate.c:	z = m->z;
rotate.c:	m->x1 = cos(m->ytheta) * x + sin(m->ytheta) * z;
rotate.c:	m->z = cos(m->ytheta) * z - sin(m->ytheta) * x;
rotate.c:	x = m->x1;
rotate.c:	y = m->y1;
rotate.c:	m->x1 = cos(m->ztheta) * x - sin(m->ztheta) * y;
rotate.c:	m->y1 = sin(m->ztheta) * x + cos(m->ztheta) * y;
rotate.c:	y = m->y1;
rotate.c:	z = m->z;
rotate.c:	m->y1 = cos(m->xtheta) * y - sin(m->xtheta) * z;
rotate.c:	m->z = sin(m->xtheta) * y + cos(m->xtheta) * z;
rotate.c:	x = m->x1;
rotate.c:	z = m->z;
rotate.c:	m->x1 = cos(m->ytheta) * x + sin(m->ytheta) * z;
rotate.c:	m->z = cos(m->ytheta) * z - sin(m->ytheta) * x;
rotate.c:	x = m->x1;
rotate.c:	y = m->y1;
rotate.c:	m->x1 = cos(m->ztheta) * x - sin(m->ztheta) * y;
rotate.c:	m->y1 = sin(m->ztheta) * x + cos(m->ztheta) * y;
stock.c:	idx = m->line;
stock.c:			if (!(array[i] = (int*)malloc(sizeof(*array) * m->column)))
stock.c:	m->line = nb_line(file);
stock.c:	m->column = nb_column(file);
